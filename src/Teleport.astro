---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"b"> {
  "data-target"?: string;
  "data-open"?: boolean;
}

export type TeleportProps = Props;

const {
  "data-target": target,
  "data-open": open,
  ...props
} = Astro.props as Props;
---

<script>
  class Teleport extends HTMLElement {
    portal: HTMLElement;
    static observedAttributes = ["data-target", "data-open", "open", "target"];

    get target() {
      const target = this.dataset.target
        ? document.querySelector<HTMLElement>(this.dataset.target)
        : document.body;
      return target;
    }

    get open() {
      return this.dataset.open === "true" || this.dataset.open === "";
    }

    constructor() {
      super();
      this.portal = document.createElement("div");
      this.portal.append(...this.childNodes);
    }

    connectedCallback() {
      this.showOrHide();
    }

    showOrHide(
      open: boolean = this.open,
      target: HTMLElement | null = this.target
    ) {
      if (target === null) {
        return;
      }
      if (open) {
        target?.appendChild(this.portal);
      } else {
        target?.removeChild(this.portal);
      }
    }

    disconnectedCallback() {
      this.showOrHide(false);
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      switch (name) {
        case "data-target": {
          const oldTarget = document.querySelector<HTMLElement>(oldValue);
          const newTarget = document.querySelector<HTMLElement>(newValue);
          if (oldTarget) {
            this.showOrHide(false, oldTarget!);
          }
          if (newTarget) {
            this.showOrHide(this.open, newTarget!);
          }
          break;
        }
        case "data-open":
          this.showOrHide();
          break;
      }
    }
  }

  customElements.define("astro-teleport", Teleport);
</script>
<astro-teleport {...props} data-target={target} data-open={open}
  ><slot /></astro-teleport
>

<style>
  astro-teleport {
    display: none;
  }
</style>
